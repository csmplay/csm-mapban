name: "CD"

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:

permissions:
  contents: read
  packages: write

jobs:
  build-and-push-docker:
    name: Build and Push Docker Images
    runs-on: node
    env:
      REGISTRY_URL: git.in.csmpro.ru
    strategy:
      matrix:
        service: [backend, frontend]

    steps:
      - name: Checkout Repository
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4

      - name: Install bun
        uses: https://github.com/oven-sh/setup-bun@735343b667d3e6f658f44d0eca948eb6282f2b76 # v2

      - name: Install Docker
        run: |
          apt update
          apt install -y docker.io

      - name: Log in to Forgejo Container Registry
        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1 # v3
        with:
          registry: ${{ env.REGISTRY_URL }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.RELEASE_TOKEN }}

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1 # v3
        with:
          registry: ghcr.io
          username: csmplay
          password: ${{ secrets.GITHUBCOM_TOKEN }}

      - name: Build ${{ matrix.service }} Docker Image
        run: |
          IMAGE=${{ env.REGISTRY_URL }}/${{ github.repository }}/${{ matrix.service }}
          GHIMAGE=ghcr.io/csmplay/csm-mapban/${{ matrix.service }}
          TAGS="-t ${IMAGE}:${{ github.ref_name }}"
          GHTAGS="-t ${GHIMAGE}:${{ github.ref_name }}"
          if [[ "${GITHUB_REF}" == refs/tags/v* ]]; then
            TAGS="${TAGS} -t ${IMAGE}:latest"
            GHTAGS="${GHTAGS} -t ${GHIMAGE}:latest"
          fi
          docker build \
            -f apps/${{ matrix.service }}/Dockerfile \
            $TAGS \
            $GHTAGS \
            --label "org.opencontainers.image.revision=${{ github.sha }}" \
            --label "org.opencontainers.image.version=${{ github.ref_name }}" \
            --label "org.opencontainers.image.created=$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
            .

      - name: Push ${{ matrix.service }} Docker Image
        run: |
          docker push --all-tags ${{ env.REGISTRY_URL }}/${{ github.repository }}/${{ matrix.service }}
          docker push --all-tags ghcr.io/csmplay/csm-mapban/${{ matrix.service }}

  build-and-push:
    name: Build and Push Release
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: node
    permissions:
      contents: write
    env:
      REPO_URL: git.in.csmpro.ru
    steps:
      - name: Checkout Repository
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4
      
      - name: Install bun
        uses: https://github.com/oven-sh/setup-bun@735343b667d3e6f658f44d0eca948eb6282f2b76 # v2

      - name: Install zip and jq
        run: |
          apt update
          apt install -y zip jq
      
      - name: Generate Release Notes
        id: release_notes
        run: |
          API_URL="https://${{ env.REPO_URL }}/api/v1"
          CUR_TAG="${{ github.ref_name }}"
          TAGS=$(curl -s -H "Authorization: token ${{ secrets.RELEASE_TOKEN }}" "$API_URL/repos/${{ github.repository }}/tags" | jq -r '.[] | "\(.name) \(.commit.sha)"')
          PREV_TAG=$(echo "$TAGS" | grep -v "$CUR_TAG" | head -n1 | awk '{print $2}')
          NOTES=$(curl -s -H "Authorization: token ${{ secrets.RELEASE_TOKEN }}" "$API_URL/repos/${{ github.repository }}/compare/$PREV_TAG...$CUR_TAG" | jq -r --arg TAG_MSG "chore: release $CUR_TAG" '.commits[] | select((.commit.message | gsub("\n";"") | ltrimstr(" ") | rtrimstr(" ")) != $TAG_MSG) | "- \(.commit.message | gsub("\n"; "")) \(.sha[0:7]) (@\(.author.login // .commit.author.name))"')
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_OUTPUT
          echo "### Changelog" >> $GITHUB_OUTPUT
          echo "$NOTES" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "---" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "The CyberSport Masters and CSM logos are registered trademarks." >> $GITHUB_OUTPUT
          echo "They may not be used, copied, modified, or distributed without explicit written permission." >> $GITHUB_OUTPUT
          echo "Detailed rules on trademark usage can be found in the [CyberSport Masters Trademark Policy](https://git.in.csmpro.ru/csmpro/csm-mapban/raw/branch/main/LICENSES/LicenseRef-CyberSportMasters.txt)." >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "Made by [**CSM**](https://csmpro.ru)" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "$GITHUB_OUTPUT"

      - name: Create Release Directory
        run: mkdir release

      - name: Build Backend release
        run: |
          cd apps/backend
          bun install --frozen-lockfile
          bun run --bun build
          cp ../../README.md dist
          cp ../../LICENSES dist -r
          mv dist csm-mapban-backend
          tar -czf ../../release/backend-release.tar.gz csm-mapban-backend
          zip -r ../../release/backend-release.zip csm-mapban-backend

      - name: Build Frontend release
        env:
          NEXT_TELEMETRY_DISABLED: 1
        run: |
          cd apps/frontend
          bun install --frozen-lockfile
          bun run --bun build
          cp ../../README.md .next/standalone/apps/frontend/
          cp ../../LICENSES .next/standalone/apps/frontend/ -r
          cd .next/standalone/apps/
          mv frontend csm-mapban-frontend
          tar -czf ../../../../../release/frontend-release.tar.gz csm-mapban-frontend
          zip -r ../../../../../release/frontend-release.zip csm-mapban-frontend

      - name: Copy and override docker-compose.yml for release
        run: |
          cp docker-compose.yml release/docker-compose.yml
          sed -i "s/:latest/:${{ github.ref_name }}/g" release/docker-compose.yml

      - name: Publish Release
        uses: https://code.forgejo.org/actions/forgejo-release@25f6ec3fc275b32766b4051eef2ae0d2a3a1f3ef # v2.7.2
        with:
          direction: upload
          url: https://${{ env.REPO_URL }}
          repo: ${{ github.repository }}
          token: ${{ secrets.RELEASE_TOKEN }}
          tag: ${{ github.ref_name }}
          release-dir: release
          release-notes: ${{ steps.release_notes.outputs.RELEASE_NOTES }}
      
      - name: Publish Release to GitHub
        run: |
          set -e
          JSON_DATA=$(jq -n --arg tag "${{ github.ref_name }}" --arg name "${{ github.ref_name }}" --arg body "${{ steps.release_notes.outputs.RELEASE_NOTES }}" \
          '{tag_name: $tag, name: $name, body: $body}')
          UPLOAD_URL=$(curl -s -X POST \
            -H "Authorization: token ${{ secrets.GITHUBCOM_TOKEN }}" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/csmplay/csm-mapban/releases \
            -d "$JSON_DATA" | jq -r '.upload_url' | sed -e "s/{?name,label}//")
          for f in release/*; do
            curl -s -X POST \
              -H "Authorization: token ${{ secrets.GITHUBCOM_TOKEN }}" \
              -H "Content-Type: application/octet-stream" \
              --data-binary @"$f" "$UPLOAD_URL?name=$(basename $f)"
          done

  trigger-portainer-webhook:
    name: Trigger Portainer webhook
    if: startsWith(github.ref, 'refs/tags/v')
    needs: build-and-push-docker
    runs-on: node
    env:
      PORTAINER_WEBHOOK_URL: ${{ secrets.PORTAINER_WEBHOOK_URL }}
    steps:
      - name: Trigger Portainer webhook
        run: curl -fsS -m 30 -X POST "$PORTAINER_WEBHOOK_URL"
